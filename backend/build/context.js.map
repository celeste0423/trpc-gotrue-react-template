{"version":3,"sources":["../src/context.ts"],"sourcesContent":["import type { inferAsyncReturnType } from '@trpc/server'\r\nimport type { CreateFastifyContextOptions } from '@trpc/server/adapters/fastify'\r\nimport type { CreateWSSContextFnOptions } from '@trpc/server/adapters/ws'\r\n\r\nimport { GoTrueClient } from '@supabase/gotrue-js'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nimport { createUserAuthClient } from './auth'\r\nimport { MBDataSource } from './datasource'\r\n\r\n//payload: 토큰에 포함된 실제 정보\r\ntype JWTPayload = {\r\n\taud: string\r\n\texp: number\r\n\tsub: string\r\n\temail: string\r\n\tphone: string\r\n\tapp_metadata: any // TODO: define\r\n\tuser_metadata: any // TODO: define\r\n\trole: string\r\n\taal: string\r\n\tamr: {\r\n\t\tmethod: string\r\n\t\ttimestamp: number\r\n\t}[]\r\n\tsession_id: string\r\n\taccessToken: string\r\n}\r\n\r\nconst createContext = async (\r\n\toptions: CreateFastifyContextOptions | CreateWSSContextFnOptions,\r\n) => {\r\n\t//datasource => env 타입\r\n\tconst datasource = MBDataSource\r\n\tif (!datasource.isInitialized) {\r\n\t\t//datasource 초기화 진행\r\n\t\tawait datasource.initialize()\r\n\t}\r\n\r\n\t//HTTP 헤더에서 jwt토큰을 추출\r\n\tconst authorization = options.req.headers.authorization\r\n\tconst accessToken = authorization?.match(/Bearer (.+)/)?.[1]\r\n\ttry {\r\n\t\t//추출한 토큰 검증\r\n\t\tif (!accessToken) {\r\n\t\t\t//토큰 없음\r\n\t\t\tthrow new Error('token does not exist')\r\n\t\t}\r\n\t\t//토큰 타입 변환\r\n\t\tconst token: JWTPayload = jwt.verify(\r\n\t\t\taccessToken,\r\n\t\t\tprocess.env.GOTRUE_JWT_SECRET!,\r\n\t\t) as JWTPayload\r\n\r\n\t\tif (token.role === 'revenuecat_admin') {\r\n\t\t\treturn {\r\n\t\t\t\tdatasource,\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tuserAuthClient: null as GoTrueClient,\r\n\r\n\t\t\t\tjwt: { ...token, accessToken },\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst userAuthClient = createUserAuthClient(accessToken)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdatasource,\r\n\t\t\t\tuserAuthClient,\r\n\t\t\t\tjwt: token,\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (error) {\r\n\t\treturn {\r\n\t\t\tdatasource,\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//createContext의 반환 타입을 받아서 Context로 타입을 정의\r\n//async함수는 보통 promise를 반환하므로 그 내부에 포함된 실제 타입을 추론할 때 사용\r\nexport type Context = inferAsyncReturnType<typeof createContext>\r\n\r\nexport default createContext\r\n"],"names":["createContext","options","datasource","MBDataSource","isInitialized","initialize","authorization","req","headers","accessToken","match","Error","token","jwt","verify","process","env","GOTRUE_JWT_SECRET","role","userAuthClient","createUserAuthClient","error"],"mappings":";;;;+BAkFA;;;eAAA;;;qEA7EgB;sBAEqB;4BACR;;;;;;AAqB7B,MAAMA,gBAAgB,OACrBC;IAEA,sBAAsB;IACtB,MAAMC,aAAaC,wBAAY;IAC/B,IAAI,CAACD,WAAWE,aAAa,EAAE;QAC9B,mBAAmB;QACnB,MAAMF,WAAWG,UAAU;IAC5B;IAEA,qBAAqB;IACrB,MAAMC,gBAAgBL,QAAQM,GAAG,CAACC,OAAO,CAACF,aAAa;IACvD,MAAMG,cAAcH,eAAeI,MAAM,gBAAgB,CAAC,EAAE;IAC5D,IAAI;QACH,WAAW;QACX,IAAI,CAACD,aAAa;YACjB,OAAO;YACP,MAAM,IAAIE,MAAM;QACjB;QACA,UAAU;QACV,MAAMC,QAAoBC,qBAAG,CAACC,MAAM,CACnCL,aACAM,QAAQC,GAAG,CAACC,iBAAiB;QAG9B,IAAIL,MAAMM,IAAI,KAAK,oBAAoB;YACtC,OAAO;gBACNhB;gBACA,aAAa;gBACbiB,gBAAgB;gBAEhBN,KAAK;oBAAE,GAAGD,KAAK;oBAAEH;gBAAY;YAC9B;QACD,OAAO;YACN,MAAMU,iBAAiBC,IAAAA,0BAAoB,EAACX;YAE5C,OAAO;gBACNP;gBACAiB;gBACAN,KAAKD;YACN;QACD;IACD,EAAE,OAAOS,OAAO;QACf,OAAO;YACNnB;QACD;IACD;AACD;MAMA,WAAeF"}